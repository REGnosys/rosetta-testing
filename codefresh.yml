version: "1.0"
stages:
  - setup
  - build
  - finalise
steps:
  main_clone:
    title: Cloning main repository...
    stage: 'setup'
    type: git-clone
    git: github
    repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
    revision: "${{CF_REVISION}}"

  SetProperties:
    title: Setup build
    stage: 'setup'
    image: alpine/git
    commands:
      - cf_export MVN_DEPLOY_FLAGS="-s ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/settings.xml -Dmaven.repo.local=${{CF_VOLUME_PATH}}/.m2 -Denv.CI_DEPLOY_PASSWORD=${{CI_DEPLOY_PASSWORD}} -Denv.CI_DEPLOY_USERNAME=${{CI_DEPLOY_USERNAME}} -Denv.GPG_KEYNAME=${{GPG_KEYNAME}} -Denv.GPG_PASSPHRASE=${{GPG_PASSPHRASE}}"
      - cf_export MVN_BUILD_FLAGS="-Dmaven.repo.local=${{CF_VOLUME_PATH}}/.m2"
      - cf_export GPG_IMPORT_COMMAND="cat <(echo -e '${{GPG_PRIVATE_KEY}}') | gpg --batch --import"

  ReleaseProperties:
    title: Setup release build
    stage: 'setup'
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == true"
    commands:
      - cf_export RELEASE_NAME=${{TAG_NAME}}
      - cf_export MAVEN_BUILD_PROFILES="gpg"
      - cf_export MVN_DEPLOY_FILE_FLAGS="${{MVN_BUILD_FLAGS}} ${{MVN_DEPLOY_FLAGS}} -Durl=https://s01.oss.sonatype.org/service/local/staging/deploy/maven2 -DrepositoryId=ossrh-distro -Dgpg.passphrase=${{GPG_PASSPHRASE}}"

  SnapshotProperties:
    title: Setup snapshot build
    stage: 'setup'
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == false"
    commands:
      - cf_export RELEASE_NAME=${{GLOBAL_RELEASE_VERSION}}.${{CF_BRANCH_TAG_NORMALIZED}}-SNAPSHOT
      - cf_export MAVEN_BUILD_PROFILES="gpg"
      - cf_export MVN_DEPLOY_FILE_FLAGS="${{MVN_BUILD_FLAGS}} ${{MVN_DEPLOY_FLAGS}} -Durl=https://s01.oss.sonatype.org/content/repositories/snapshots -DrepositoryId=ossrh -Dgpg.passphrase=${{GPG_PASSPHRASE}}"

  BuildTesting:
    title: Maven build
    stage: 'build'
    fail_fast: false
    image: maven:3.8.5-openjdk-17
    working_directory: ./
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - mvn ${{MVN_BUILD_FLAGS}} versions:set -DnewVersion=${{RELEASE_NAME}} -DallowSnapshots=true
      - mvn ${{MVN_DEPLOY_FLAGS}} clean deploy -P "${{MAVEN_BUILD_PROFILES}}"

  FailPipeline:
    title: Fail pipeline if the Maven build failed
    stage: 'finalise'
    image: codefresh/cli
    when:
      steps:
        - name: BuildTesting
          on:
            - failure
    commands:
      - exit 1

  TagRepo:
    title: Tag git repo with release name
    stage: 'finalise'
    image: alpine/git
    when:
      condition:
        all:
          buildTestingPassed: steps.BuildTesting.result == 'success'
          isRelease: "${{TAG_REPO}}"
    commands:
      - echo This is a release build, tag repos with release name [${{RELEASE_NAME}}]
      - git fetch --prune https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_TOKEN}}@github.com/REGnosys/${{CF_REPO_NAME}}.git "+refs/tags/*:refs/tags/*"
      - git tag ${{RELEASE_NAME}}
      - git push https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_TOKEN}}@github.com/REGnosys/${{CF_REPO_NAME}}.git ${{RELEASE_NAME}}

  StartNextBuild:
    title: Build rosetta-components if on master
    stage: 'finalise'
    image: codefresh/cli
    when:
      branch:
        only:
          - master
      condition:
        all:
          buildPassed: steps.BuildTesting.result == 'success'
          variableDefined: "${{TAG_REPO}} == false"
          skipNextBuild: "${{SKIP_NEXT_BUILD}} == false"
    commands:
      - codefresh run REGnosys/rosetta-components/rosetta-components --branch master --detach